Algorithm to create gradient fallback for an image.

Args to pass in:
(Set reasonable defaults for optional args)

@imagePath: path to image (required)
@gradientType: linear-gradient() horizontal / vertical / diagonal, radial-gradient() (optional)
@bands: number of bands (optional)
@vendorPrefix: include vendor prefixes for gradient (optional)
@cssComments: include comments in generated CSS gradient? (i.e /* fallback color */ /* For Chrome 25 and Safari 6, iOS 6.1, Android 4.3 */ etc).
@output?: CSS gradient | <canvas> | <svg> (optional)

Gradient class?
LinearGradient extends Gradient
RadialGradient extends Gradient

i.e Gradient gradient = new Gradient()
gradient.toCSS();

Would be cool to generate image/overlay showing:
 - Each band region
 - Each band region filled with average color (of that band)

Resize large images to make generating gradient quicker?

Things todo for release:

3. Documentation

Nice to have:

- Add CLI options to `--help`
- Standard vendor prefix by default, * to select all

Improvements / road map:

- Detect optimal slice direction
- Web interface
- Velocity macro
- Improve / battle-test diagonal gradients

Todos:

- Test ParamValidator without CLI to mock web interface (initializing Image2Gradient programmatically).

- Band visualisations
    - Show average color in each band
    - Overlay image with lines showing each band
- Web interface
- Velocity macro
- Image2TinyGif, Image2Base64 -> other ways of replicating image fallbacks...
- Useful to pass url of image

Examples:


- java Image2Gradient -f 400 ../../../images/beach.jpg
- java Image2Gradient -f 400 ../../../images/another_sunset.jpg
- java Image2Gradient -f 400 -t l2r ../../../images/sand.jpg


- java Image2Gradient -f 300 ../../../images/sunset.jpg
- java Image2Gradient -f 500 ../../../images/lake_sunset.jpg
- java Image2Gradient -f 500 -t l2r ../../../images/building.jpg
- java Image2Gradient -f 400 -t l2r ../../../images/trees.jpg